
stm32-fc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003638  08003638  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003638  08003638  00013638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003640  08003640  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  2000000c  08003654  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000144  08003654  00020144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc53  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c3  00000000  00000000  0002cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0002ed50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  0002fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016019  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe49  00000000  00000000  00046839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a28f  00000000  00000000  00056682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0911  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  000e0964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080035fc 	.word	0x080035fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080035fc 	.word	0x080035fc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b976 	b.w	8000480 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	4688      	mov	r8, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14d      	bne.n	8000258 <__udivmoddi4+0xac>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d968      	bls.n	8000294 <__udivmoddi4+0xe8>
 80001c2:	fab2 f282 	clz	r2, r2
 80001c6:	b152      	cbz	r2, 80001de <__udivmoddi4+0x32>
 80001c8:	fa01 f302 	lsl.w	r3, r1, r2
 80001cc:	f1c2 0120 	rsb	r1, r2, #32
 80001d0:	fa20 f101 	lsr.w	r1, r0, r1
 80001d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d8:	ea41 0803 	orr.w	r8, r1, r3
 80001dc:	4094      	lsls	r4, r2
 80001de:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001e2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001e6:	fa1f fe8c 	uxth.w	lr, ip
 80001ea:	fb01 8817 	mls	r8, r1, r7, r8
 80001ee:	fb07 f00e 	mul.w	r0, r7, lr
 80001f2:	0c23      	lsrs	r3, r4, #16
 80001f4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f8:	4298      	cmp	r0, r3
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0303 	adds.w	r3, ip, r3
 8000200:	f107 35ff 	add.w	r5, r7, #4294967295
 8000204:	f080 811e 	bcs.w	8000444 <__udivmoddi4+0x298>
 8000208:	4298      	cmp	r0, r3
 800020a:	f240 811b 	bls.w	8000444 <__udivmoddi4+0x298>
 800020e:	3f02      	subs	r7, #2
 8000210:	4463      	add	r3, ip
 8000212:	1a1b      	subs	r3, r3, r0
 8000214:	fbb3 f0f1 	udiv	r0, r3, r1
 8000218:	fb01 3310 	mls	r3, r1, r0, r3
 800021c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000226:	45a6      	cmp	lr, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000232:	f080 8109 	bcs.w	8000448 <__udivmoddi4+0x29c>
 8000236:	45a6      	cmp	lr, r4
 8000238:	f240 8106 	bls.w	8000448 <__udivmoddi4+0x29c>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	eba4 040e 	sub.w	r4, r4, lr
 8000246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800024a:	b11e      	cbz	r6, 8000254 <__udivmoddi4+0xa8>
 800024c:	2300      	movs	r3, #0
 800024e:	40d4      	lsrs	r4, r2
 8000250:	e9c6 4300 	strd	r4, r3, [r6]
 8000254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000258:	428b      	cmp	r3, r1
 800025a:	d908      	bls.n	800026e <__udivmoddi4+0xc2>
 800025c:	2e00      	cmp	r6, #0
 800025e:	f000 80ee 	beq.w	800043e <__udivmoddi4+0x292>
 8000262:	2100      	movs	r1, #0
 8000264:	e9c6 0500 	strd	r0, r5, [r6]
 8000268:	4608      	mov	r0, r1
 800026a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026e:	fab3 f183 	clz	r1, r3
 8000272:	2900      	cmp	r1, #0
 8000274:	d14a      	bne.n	800030c <__udivmoddi4+0x160>
 8000276:	42ab      	cmp	r3, r5
 8000278:	d302      	bcc.n	8000280 <__udivmoddi4+0xd4>
 800027a:	4282      	cmp	r2, r0
 800027c:	f200 80fc 	bhi.w	8000478 <__udivmoddi4+0x2cc>
 8000280:	1a84      	subs	r4, r0, r2
 8000282:	eb65 0303 	sbc.w	r3, r5, r3
 8000286:	2001      	movs	r0, #1
 8000288:	4698      	mov	r8, r3
 800028a:	2e00      	cmp	r6, #0
 800028c:	d0e2      	beq.n	8000254 <__udivmoddi4+0xa8>
 800028e:	e9c6 4800 	strd	r4, r8, [r6]
 8000292:	e7df      	b.n	8000254 <__udivmoddi4+0xa8>
 8000294:	b902      	cbnz	r2, 8000298 <__udivmoddi4+0xec>
 8000296:	deff      	udf	#255	; 0xff
 8000298:	fab2 f282 	clz	r2, r2
 800029c:	2a00      	cmp	r2, #0
 800029e:	f040 8091 	bne.w	80003c4 <__udivmoddi4+0x218>
 80002a2:	eba1 000c 	sub.w	r0, r1, ip
 80002a6:	2101      	movs	r1, #1
 80002a8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ac:	fa1f fe8c 	uxth.w	lr, ip
 80002b0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002b4:	fb07 0013 	mls	r0, r7, r3, r0
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002be:	fb0e f003 	mul.w	r0, lr, r3
 80002c2:	42a8      	cmp	r0, r5
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0x12c>
 80002c6:	eb1c 0505 	adds.w	r5, ip, r5
 80002ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ce:	d202      	bcs.n	80002d6 <__udivmoddi4+0x12a>
 80002d0:	42a8      	cmp	r0, r5
 80002d2:	f200 80ce 	bhi.w	8000472 <__udivmoddi4+0x2c6>
 80002d6:	4643      	mov	r3, r8
 80002d8:	1a2d      	subs	r5, r5, r0
 80002da:	fbb5 f0f7 	udiv	r0, r5, r7
 80002de:	fb07 5510 	mls	r5, r7, r0, r5
 80002e2:	fb0e fe00 	mul.w	lr, lr, r0
 80002e6:	b2a4      	uxth	r4, r4
 80002e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d908      	bls.n	8000302 <__udivmoddi4+0x156>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x154>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f200 80b6 	bhi.w	800046c <__udivmoddi4+0x2c0>
 8000300:	4628      	mov	r0, r5
 8000302:	eba4 040e 	sub.w	r4, r4, lr
 8000306:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800030a:	e79e      	b.n	800024a <__udivmoddi4+0x9e>
 800030c:	f1c1 0720 	rsb	r7, r1, #32
 8000310:	408b      	lsls	r3, r1
 8000312:	fa22 fc07 	lsr.w	ip, r2, r7
 8000316:	ea4c 0c03 	orr.w	ip, ip, r3
 800031a:	fa25 fa07 	lsr.w	sl, r5, r7
 800031e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000322:	fbba f8f9 	udiv	r8, sl, r9
 8000326:	fa20 f307 	lsr.w	r3, r0, r7
 800032a:	fb09 aa18 	mls	sl, r9, r8, sl
 800032e:	408d      	lsls	r5, r1
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	431d      	orrs	r5, r3
 8000336:	fa00 f301 	lsl.w	r3, r0, r1
 800033a:	fb08 f00e 	mul.w	r0, r8, lr
 800033e:	0c2c      	lsrs	r4, r5, #16
 8000340:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000344:	42a0      	cmp	r0, r4
 8000346:	fa02 f201 	lsl.w	r2, r2, r1
 800034a:	d90b      	bls.n	8000364 <__udivmoddi4+0x1b8>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f108 3aff 	add.w	sl, r8, #4294967295
 8000354:	f080 8088 	bcs.w	8000468 <__udivmoddi4+0x2bc>
 8000358:	42a0      	cmp	r0, r4
 800035a:	f240 8085 	bls.w	8000468 <__udivmoddi4+0x2bc>
 800035e:	f1a8 0802 	sub.w	r8, r8, #2
 8000362:	4464      	add	r4, ip
 8000364:	1a24      	subs	r4, r4, r0
 8000366:	fbb4 f0f9 	udiv	r0, r4, r9
 800036a:	fb09 4410 	mls	r4, r9, r0, r4
 800036e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000372:	b2ad      	uxth	r5, r5
 8000374:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x1e2>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 35ff 	add.w	r5, r0, #4294967295
 8000384:	d26c      	bcs.n	8000460 <__udivmoddi4+0x2b4>
 8000386:	45a6      	cmp	lr, r4
 8000388:	d96a      	bls.n	8000460 <__udivmoddi4+0x2b4>
 800038a:	3802      	subs	r0, #2
 800038c:	4464      	add	r4, ip
 800038e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000392:	fba0 9502 	umull	r9, r5, r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	42ac      	cmp	r4, r5
 800039c:	46c8      	mov	r8, r9
 800039e:	46ae      	mov	lr, r5
 80003a0:	d356      	bcc.n	8000450 <__udivmoddi4+0x2a4>
 80003a2:	d053      	beq.n	800044c <__udivmoddi4+0x2a0>
 80003a4:	2e00      	cmp	r6, #0
 80003a6:	d069      	beq.n	800047c <__udivmoddi4+0x2d0>
 80003a8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ac:	eb64 040e 	sbc.w	r4, r4, lr
 80003b0:	fa22 f301 	lsr.w	r3, r2, r1
 80003b4:	fa04 f707 	lsl.w	r7, r4, r7
 80003b8:	431f      	orrs	r7, r3
 80003ba:	40cc      	lsrs	r4, r1
 80003bc:	e9c6 7400 	strd	r7, r4, [r6]
 80003c0:	2100      	movs	r1, #0
 80003c2:	e747      	b.n	8000254 <__udivmoddi4+0xa8>
 80003c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003c8:	f1c2 0120 	rsb	r1, r2, #32
 80003cc:	fa25 f301 	lsr.w	r3, r5, r1
 80003d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d4:	fa20 f101 	lsr.w	r1, r0, r1
 80003d8:	4095      	lsls	r5, r2
 80003da:	430d      	orrs	r5, r1
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3311 	mls	r3, r7, r1, r3
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	0c28      	lsrs	r0, r5, #16
 80003ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ee:	fb01 f30e 	mul.w	r3, r1, lr
 80003f2:	4283      	cmp	r3, r0
 80003f4:	fa04 f402 	lsl.w	r4, r4, r2
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x260>
 80003fa:	eb1c 0000 	adds.w	r0, ip, r0
 80003fe:	f101 38ff 	add.w	r8, r1, #4294967295
 8000402:	d22f      	bcs.n	8000464 <__udivmoddi4+0x2b8>
 8000404:	4283      	cmp	r3, r0
 8000406:	d92d      	bls.n	8000464 <__udivmoddi4+0x2b8>
 8000408:	3902      	subs	r1, #2
 800040a:	4460      	add	r0, ip
 800040c:	1ac0      	subs	r0, r0, r3
 800040e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000412:	fb07 0013 	mls	r0, r7, r3, r0
 8000416:	b2ad      	uxth	r5, r5
 8000418:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800041c:	fb03 f00e 	mul.w	r0, r3, lr
 8000420:	42a8      	cmp	r0, r5
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x28a>
 8000424:	eb1c 0505 	adds.w	r5, ip, r5
 8000428:	f103 38ff 	add.w	r8, r3, #4294967295
 800042c:	d216      	bcs.n	800045c <__udivmoddi4+0x2b0>
 800042e:	42a8      	cmp	r0, r5
 8000430:	d914      	bls.n	800045c <__udivmoddi4+0x2b0>
 8000432:	3b02      	subs	r3, #2
 8000434:	4465      	add	r5, ip
 8000436:	1a28      	subs	r0, r5, r0
 8000438:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043c:	e738      	b.n	80002b0 <__udivmoddi4+0x104>
 800043e:	4631      	mov	r1, r6
 8000440:	4630      	mov	r0, r6
 8000442:	e707      	b.n	8000254 <__udivmoddi4+0xa8>
 8000444:	462f      	mov	r7, r5
 8000446:	e6e4      	b.n	8000212 <__udivmoddi4+0x66>
 8000448:	4618      	mov	r0, r3
 800044a:	e6f9      	b.n	8000240 <__udivmoddi4+0x94>
 800044c:	454b      	cmp	r3, r9
 800044e:	d2a9      	bcs.n	80003a4 <__udivmoddi4+0x1f8>
 8000450:	ebb9 0802 	subs.w	r8, r9, r2
 8000454:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000458:	3801      	subs	r0, #1
 800045a:	e7a3      	b.n	80003a4 <__udivmoddi4+0x1f8>
 800045c:	4643      	mov	r3, r8
 800045e:	e7ea      	b.n	8000436 <__udivmoddi4+0x28a>
 8000460:	4628      	mov	r0, r5
 8000462:	e794      	b.n	800038e <__udivmoddi4+0x1e2>
 8000464:	4641      	mov	r1, r8
 8000466:	e7d1      	b.n	800040c <__udivmoddi4+0x260>
 8000468:	46d0      	mov	r8, sl
 800046a:	e77b      	b.n	8000364 <__udivmoddi4+0x1b8>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	e747      	b.n	8000302 <__udivmoddi4+0x156>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	e72f      	b.n	80002d8 <__udivmoddi4+0x12c>
 8000478:	4608      	mov	r0, r1
 800047a:	e706      	b.n	800028a <__udivmoddi4+0xde>
 800047c:	4631      	mov	r1, r6
 800047e:	e6e9      	b.n	8000254 <__udivmoddi4+0xa8>

08000480 <__aeabi_idiv0>:
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop

08000484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08a      	sub	sp, #40	; 0x28
 8000488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048a:	f107 0314 	add.w	r3, r7, #20
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800049a:	4b2a      	ldr	r3, [pc, #168]	; (8000544 <MX_GPIO_Init+0xc0>)
 800049c:	69db      	ldr	r3, [r3, #28]
 800049e:	4a29      	ldr	r2, [pc, #164]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	61d3      	str	r3, [r2, #28]
 80004a6:	4b27      	ldr	r3, [pc, #156]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	f003 0304 	and.w	r3, r3, #4
 80004ae:	613b      	str	r3, [r7, #16]
 80004b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004b2:	4b24      	ldr	r3, [pc, #144]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	4a23      	ldr	r2, [pc, #140]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004b8:	f043 0320 	orr.w	r3, r3, #32
 80004bc:	61d3      	str	r3, [r2, #28]
 80004be:	4b21      	ldr	r3, [pc, #132]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	f003 0320 	and.w	r3, r3, #32
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d0:	f043 0301 	orr.w	r3, r3, #1
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	60bb      	str	r3, [r7, #8]
 80004e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e2:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004e8:	f043 0302 	orr.w	r3, r3, #2
 80004ec:	61d3      	str	r3, [r2, #28]
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0xc0>)
 80004f0:	69db      	ldr	r3, [r3, #28]
 80004f2:	f003 0302 	and.w	r3, r3, #2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2120      	movs	r1, #32
 80004fe:	4812      	ldr	r0, [pc, #72]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000500:	f000 ff4c 	bl	800139c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000508:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800050a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800050e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	4619      	mov	r1, r3
 800051a:	480c      	ldr	r0, [pc, #48]	; (800054c <MX_GPIO_Init+0xc8>)
 800051c:	f000 fdae 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000520:	2320      	movs	r3, #32
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000524:	2301      	movs	r3, #1
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000528:	2300      	movs	r3, #0
 800052a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052c:	2300      	movs	r3, #0
 800052e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000530:	f107 0314 	add.w	r3, r7, #20
 8000534:	4619      	mov	r1, r3
 8000536:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_GPIO_Init+0xc4>)
 8000538:	f000 fda0 	bl	800107c <HAL_GPIO_Init>

}
 800053c:	bf00      	nop
 800053e:	3728      	adds	r7, #40	; 0x28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40023800 	.word	0x40023800
 8000548:	40020000 	.word	0x40020000
 800054c:	40020800 	.word	0x40020800

08000550 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <MX_I2C1_Init+0x50>)
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <MX_I2C1_Init+0x54>)
 8000558:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <MX_I2C1_Init+0x50>)
 800055c:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <MX_I2C1_Init+0x58>)
 800055e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <MX_I2C1_Init+0x50>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000566:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <MX_I2C1_Init+0x50>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_I2C1_Init+0x50>)
 800056e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000572:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <MX_I2C1_Init+0x50>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_I2C1_Init+0x50>)
 800057c:	2200      	movs	r2, #0
 800057e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000580:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <MX_I2C1_Init+0x50>)
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <MX_I2C1_Init+0x50>)
 8000588:	2200      	movs	r2, #0
 800058a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_I2C1_Init+0x50>)
 800058e:	f000 ff1d 	bl	80013cc <HAL_I2C_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000598:	f000 f8ac 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000028 	.word	0x20000028
 80005a4:	40005400 	.word	0x40005400
 80005a8:	000186a0 	.word	0x000186a0

080005ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	; 0x28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b4:	f107 0314 	add.w	r3, r7, #20
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_I2C_MspInit+0x7c>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d128      	bne.n	8000620 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ce:	4b17      	ldr	r3, [pc, #92]	; (800062c <HAL_I2C_MspInit+0x80>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a16      	ldr	r2, [pc, #88]	; (800062c <HAL_I2C_MspInit+0x80>)
 80005d4:	f043 0302 	orr.w	r3, r3, #2
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b14      	ldr	r3, [pc, #80]	; (800062c <HAL_I2C_MspInit+0x80>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 0302 	and.w	r3, r3, #2
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005ec:	2312      	movs	r3, #18
 80005ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f4:	2303      	movs	r3, #3
 80005f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005f8:	2304      	movs	r3, #4
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <HAL_I2C_MspInit+0x84>)
 8000604:	f000 fd3a 	bl	800107c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <HAL_I2C_MspInit+0x80>)
 800060a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_I2C_MspInit+0x80>)
 800060e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000612:	6253      	str	r3, [r2, #36]	; 0x24
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <HAL_I2C_MspInit+0x80>)
 8000616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000620:	bf00      	nop
 8000622:	3728      	adds	r7, #40	; 0x28
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40005400 	.word	0x40005400
 800062c:	40023800 	.word	0x40023800
 8000630:	40020400 	.word	0x40020400

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 fb25 	bl	8000c86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f80c 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f7ff ff20 	bl	8000484 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000644:	f7ff ff84 	bl	8000550 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000648:	f000 fa82 	bl	8000b50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800064c:	f000 f8d4 	bl	80007f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000650:	f000 f962 	bl	8000918 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x20>
	...

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b092      	sub	sp, #72	; 0x48
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 ffc0 	bl	80035ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	463b      	mov	r3, r7
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <SystemClock_Config+0x98>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000682:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <SystemClock_Config+0x98>)
 8000684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000688:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068a:	2302      	movs	r3, #2
 800068c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2300      	movs	r3, #0
 800069c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800069e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80006a4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80006a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ffd0 	bl	8001654 <HAL_RCC_OscConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ba:	f000 f81b 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006be:	230f      	movs	r3, #15
 80006c0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c2:	2303      	movs	r3, #3
 80006c4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	2101      	movs	r1, #1
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 faec 	bl	8001cb4 <HAL_RCC_ClockConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e2:	f000 f807 	bl	80006f4 <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	3748      	adds	r7, #72	; 0x48
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40007000 	.word	0x40007000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <HAL_MspInit+0x5c>)
 8000708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <HAL_MspInit+0x5c>)
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	6253      	str	r3, [r2, #36]	; 0x24
 8000712:	4b12      	ldr	r3, [pc, #72]	; (800075c <HAL_MspInit+0x5c>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x5c>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x5c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6213      	str	r3, [r2, #32]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x5c>)
 800072c:	6a1b      	ldr	r3, [r3, #32]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x5c>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x5c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6253      	str	r3, [r2, #36]	; 0x24
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x5c>)
 8000744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 fbd4 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a6:	f000 fac1 	bl	8000d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <TIM2_IRQHandler+0x10>)
 80007b6:	f001 fdca 	bl	800234e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000007c 	.word	0x2000007c

080007c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <TIM3_IRQHandler+0x10>)
 80007ca:	f001 fdc0 	bl	800234e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000bc 	.word	0x200000bc

080007d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <USART2_IRQHandler+0x10>)
 80007de:	f002 fadd 	bl	8002d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000fc 	.word	0x200000fc

080007ec <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	; 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	f107 0318 	add.w	r3, r7, #24
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080c:	f107 0310 	add.w	r3, r7, #16
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000822:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32 -1;
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_TIM2_Init+0x11c>)
 800082c:	221f      	movs	r2, #31
 800082e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b38      	ldr	r3, [pc, #224]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b35      	ldr	r3, [pc, #212]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000844:	4b33      	ldr	r3, [pc, #204]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800084a:	4832      	ldr	r0, [pc, #200]	; (8000914 <MX_TIM2_Init+0x11c>)
 800084c:	f001 fcf8 	bl	8002240 <HAL_TIM_Base_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000856:	f7ff ff4d 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000860:	f107 0318 	add.w	r3, r7, #24
 8000864:	4619      	mov	r1, r3
 8000866:	482b      	ldr	r0, [pc, #172]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000868:	f001 fee1 	bl	800262e <HAL_TIM_ConfigClockSource>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000872:	f7ff ff3f 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000876:	4827      	ldr	r0, [pc, #156]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000878:	f001 fd21 	bl	80022be <HAL_TIM_IC_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000882:	f7ff ff37 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800088e:	f107 0310 	add.w	r3, r7, #16
 8000892:	4619      	mov	r1, r3
 8000894:	481f      	ldr	r0, [pc, #124]	; (8000914 <MX_TIM2_Init+0x11c>)
 8000896:	f002 f9d5 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80008a0:	f7ff ff28 	bl	80006f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80008a4:	230a      	movs	r3, #10
 80008a6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008a8:	2301      	movs	r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	4619      	mov	r1, r3
 80008ba:	4816      	ldr	r0, [pc, #88]	; (8000914 <MX_TIM2_Init+0x11c>)
 80008bc:	f001 fe23 	bl	8002506 <HAL_TIM_IC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80008c6:	f7ff ff15 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	2204      	movs	r2, #4
 80008ce:	4619      	mov	r1, r3
 80008d0:	4810      	ldr	r0, [pc, #64]	; (8000914 <MX_TIM2_Init+0x11c>)
 80008d2:	f001 fe18 	bl	8002506 <HAL_TIM_IC_ConfigChannel>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80008dc:	f7ff ff0a 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	2208      	movs	r2, #8
 80008e4:	4619      	mov	r1, r3
 80008e6:	480b      	ldr	r0, [pc, #44]	; (8000914 <MX_TIM2_Init+0x11c>)
 80008e8:	f001 fe0d 	bl	8002506 <HAL_TIM_IC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 80008f2:	f7ff feff 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80008f6:	463b      	mov	r3, r7
 80008f8:	220c      	movs	r2, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_TIM2_Init+0x11c>)
 80008fe:	f001 fe02 	bl	8002506 <HAL_TIM_IC_ConfigChannel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0x114>
  {
    Error_Handler();
 8000908:	f7ff fef4 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	2000007c 	.word	0x2000007c

08000918 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	; 0x28
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800091e:	f107 0318 	add.w	r3, r7, #24
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000942:	4b31      	ldr	r3, [pc, #196]	; (8000a08 <MX_TIM3_Init+0xf0>)
 8000944:	4a31      	ldr	r2, [pc, #196]	; (8000a0c <MX_TIM3_Init+0xf4>)
 8000946:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000948:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_TIM3_Init+0xf0>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b2e      	ldr	r3, [pc, #184]	; (8000a08 <MX_TIM3_Init+0xf0>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000954:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_TIM3_Init+0xf0>)
 8000956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <MX_TIM3_Init+0xf0>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_TIM3_Init+0xf0>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000968:	4827      	ldr	r0, [pc, #156]	; (8000a08 <MX_TIM3_Init+0xf0>)
 800096a:	f001 fc69 	bl	8002240 <HAL_TIM_Base_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000974:	f7ff febe 	bl	80006f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000978:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800097e:	f107 0318 	add.w	r3, r7, #24
 8000982:	4619      	mov	r1, r3
 8000984:	4820      	ldr	r0, [pc, #128]	; (8000a08 <MX_TIM3_Init+0xf0>)
 8000986:	f001 fe52 	bl	800262e <HAL_TIM_ConfigClockSource>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000990:	f7ff feb0 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000994:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_TIM3_Init+0xf0>)
 8000996:	f001 fc92 	bl	80022be <HAL_TIM_IC_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80009a0:	f7ff fea8 	bl	80006f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009ac:	f107 0310 	add.w	r3, r7, #16
 80009b0:	4619      	mov	r1, r3
 80009b2:	4815      	ldr	r0, [pc, #84]	; (8000a08 <MX_TIM3_Init+0xf0>)
 80009b4:	f002 f946 	bl	8002c44 <HAL_TIMEx_MasterConfigSynchronization>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80009be:	f7ff fe99 	bl	80006f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80009c2:	230a      	movs	r3, #10
 80009c4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009c6:	2301      	movs	r3, #1
 80009c8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	2200      	movs	r2, #0
 80009d6:	4619      	mov	r1, r3
 80009d8:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_TIM3_Init+0xf0>)
 80009da:	f001 fd94 	bl	8002506 <HAL_TIM_IC_ConfigChannel>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80009e4:	f7ff fe86 	bl	80006f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2204      	movs	r2, #4
 80009ec:	4619      	mov	r1, r3
 80009ee:	4806      	ldr	r0, [pc, #24]	; (8000a08 <MX_TIM3_Init+0xf0>)
 80009f0:	f001 fd89 	bl	8002506 <HAL_TIM_IC_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80009fa:	f7ff fe7b 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000bc 	.word	0x200000bc
 8000a0c:	40000400 	.word	0x40000400

08000a10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08c      	sub	sp, #48	; 0x30
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a30:	d14d      	bne.n	8000ace <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a32:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a36:	4a42      	ldr	r2, [pc, #264]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a3e:	4b40      	ldr	r3, [pc, #256]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	4b3d      	ldr	r3, [pc, #244]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a3c      	ldr	r2, [pc, #240]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b3a      	ldr	r3, [pc, #232]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b37      	ldr	r3, [pc, #220]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a64:	69db      	ldr	r3, [r3, #28]
 8000a66:	4a36      	ldr	r2, [pc, #216]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	61d3      	str	r3, [r2, #28]
 8000a6e:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000a70:	69db      	ldr	r3, [r3, #28]
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP1     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = RC_CH_1_Pin|RC_CH_2_Pin;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	482b      	ldr	r0, [pc, #172]	; (8000b44 <HAL_TIM_Base_MspInit+0x134>)
 8000a96:	f000 faf1 	bl	800107c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RC_CH_3_Pin|RC_CH_4_Pin;
 8000a9a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000aac:	2301      	movs	r3, #1
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4824      	ldr	r0, [pc, #144]	; (8000b48 <HAL_TIM_Base_MspInit+0x138>)
 8000ab8:	f000 fae0 	bl	800107c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	201c      	movs	r0, #28
 8000ac2:	f000 fa26 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac6:	201c      	movs	r0, #28
 8000ac8:	f000 fa3f 	bl	8000f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000acc:	e034      	b.n	8000b38 <HAL_TIM_Base_MspInit+0x128>
  else if(tim_baseHandle->Instance==TIM3)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <HAL_TIM_Base_MspInit+0x13c>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d12f      	bne.n	8000b38 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000adc:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	6253      	str	r3, [r2, #36]	; 0x24
 8000ae4:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4a12      	ldr	r2, [pc, #72]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	61d3      	str	r3, [r2, #28]
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_TIM_Base_MspInit+0x130>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RC_CH_5_Pin|RC_CH_6_Pin;
 8000b08:	23c0      	movs	r3, #192	; 0xc0
 8000b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b14:	2300      	movs	r3, #0
 8000b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4808      	ldr	r0, [pc, #32]	; (8000b44 <HAL_TIM_Base_MspInit+0x134>)
 8000b24:	f000 faaa 	bl	800107c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	201d      	movs	r0, #29
 8000b2e:	f000 f9f0 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b32:	201d      	movs	r0, #29
 8000b34:	f000 fa09 	bl	8000f4a <HAL_NVIC_EnableIRQ>
}
 8000b38:	bf00      	nop
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400
 8000b4c:	40000400 	.word	0x40000400

08000b50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b56:	4a12      	ldr	r2, [pc, #72]	; (8000ba0 <MX_USART2_UART_Init+0x50>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USART2_UART_Init+0x4c>)
 8000b88:	f002 f8ba 	bl	8002d00 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b92:	f7ff fdaf 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000fc 	.word	0x200000fc
 8000ba0:	40004400 	.word	0x40004400

08000ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <HAL_UART_MspInit+0x8c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d12f      	bne.n	8000c26 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc6:	4b1b      	ldr	r3, [pc, #108]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bca:	4a1a      	ldr	r2, [pc, #104]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd0:	6253      	str	r3, [r2, #36]	; 0x24
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	4a14      	ldr	r2, [pc, #80]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	61d3      	str	r3, [r2, #28]
 8000bea:	4b12      	ldr	r3, [pc, #72]	; (8000c34 <HAL_UART_MspInit+0x90>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c06:	2307      	movs	r3, #7
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <HAL_UART_MspInit+0x94>)
 8000c12:	f000 fa33 	bl	800107c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2026      	movs	r0, #38	; 0x26
 8000c1c:	f000 f979 	bl	8000f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c20:	2026      	movs	r0, #38	; 0x26
 8000c22:	f000 f992 	bl	8000f4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	; (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c62:	f7ff fdc3 	bl	80007ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fc9d 	bl	80035a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6a:	f7ff fce3 	bl	8000634 <main>
  bx lr
 8000c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c78:	08003648 	.word	0x08003648
  ldr r2, =_sbss
 8000c7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c80:	20000144 	.word	0x20000144

08000c84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC1_IRQHandler>

08000c86 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b082      	sub	sp, #8
 8000c8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f933 	bl	8000efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c96:	2000      	movs	r0, #0
 8000c98:	f000 f80e 	bl	8000cb8 <HAL_InitTick>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	71fb      	strb	r3, [r7, #7]
 8000ca6:	e001      	b.n	8000cac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca8:	f7ff fd2a 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_InitTick+0x68>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d022      	beq.n	8000d12 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <HAL_InitTick+0x6c>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <HAL_InitTick+0x68>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f940 	bl	8000f66 <HAL_SYSTICK_Config>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10f      	bne.n	8000d0c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	d809      	bhi.n	8000d06 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfa:	f000 f90a 	bl	8000f12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_InitTick+0x70>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e007      	b.n	8000d16 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e004      	b.n	8000d16 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e001      	b.n	8000d16 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004

08000d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d30:	4b05      	ldr	r3, [pc, #20]	; (8000d48 <HAL_IncTick+0x1c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_IncTick+0x20>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a03      	ldr	r2, [pc, #12]	; (8000d48 <HAL_IncTick+0x1c>)
 8000d3c:	6013      	str	r3, [r2, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000140 	.word	0x20000140
 8000d4c:	20000008 	.word	0x20000008

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b02      	ldr	r3, [pc, #8]	; (8000d60 <HAL_GetTick+0x10>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	20000140 	.word	0x20000140

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4906      	ldr	r1, [pc, #24]	; (8000dfc <__NVIC_EnableIRQ+0x34>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e000e100 	.word	0xe000e100

08000e00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db0a      	blt.n	8000e2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	490c      	ldr	r1, [pc, #48]	; (8000e4c <__NVIC_SetPriority+0x4c>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	0112      	lsls	r2, r2, #4
 8000e20:	b2d2      	uxtb	r2, r2
 8000e22:	440b      	add	r3, r1
 8000e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e28:	e00a      	b.n	8000e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4908      	ldr	r1, [pc, #32]	; (8000e50 <__NVIC_SetPriority+0x50>)
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	f003 030f 	and.w	r3, r3, #15
 8000e36:	3b04      	subs	r3, #4
 8000e38:	0112      	lsls	r2, r2, #4
 8000e3a:	b2d2      	uxtb	r2, r2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	761a      	strb	r2, [r3, #24]
}
 8000e40:	bf00      	nop
 8000e42:	370c      	adds	r7, #12
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000e100 	.word	0xe000e100
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f1c3 0307 	rsb	r3, r3, #7
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	bf28      	it	cs
 8000e72:	2304      	movcs	r3, #4
 8000e74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3304      	adds	r3, #4
 8000e7a:	2b06      	cmp	r3, #6
 8000e7c:	d902      	bls.n	8000e84 <NVIC_EncodePriority+0x30>
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3b03      	subs	r3, #3
 8000e82:	e000      	b.n	8000e86 <NVIC_EncodePriority+0x32>
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	f04f 32ff 	mov.w	r2, #4294967295
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43da      	mvns	r2, r3
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	401a      	ands	r2, r3
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea6:	43d9      	mvns	r1, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	4313      	orrs	r3, r2
         );
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec8:	d301      	bcc.n	8000ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00f      	b.n	8000eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <SysTick_Config+0x40>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f7ff ff90 	bl	8000e00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee6:	4b04      	ldr	r3, [pc, #16]	; (8000ef8 <SysTick_Config+0x40>)
 8000ee8:	2207      	movs	r2, #7
 8000eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eec:	2300      	movs	r3, #0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	e000e010 	.word	0xe000e010

08000efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff ff2d 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b086      	sub	sp, #24
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	4603      	mov	r3, r0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f24:	f7ff ff42 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	6978      	ldr	r0, [r7, #20]
 8000f30:	f7ff ff90 	bl	8000e54 <NVIC_EncodePriority>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff5f 	bl	8000e00 <__NVIC_SetPriority>
}
 8000f42:	bf00      	nop
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff35 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ffa2 	bl	8000eb8 <SysTick_Config>
 8000f74:	4603      	mov	r3, r0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b085      	sub	sp, #20
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d008      	beq.n	8000fa8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2204      	movs	r2, #4
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e022      	b.n	8000fee <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f022 020e 	bic.w	r2, r2, #14
 8000fb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0201 	bic.w	r2, r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 021c 	and.w	r2, r3, #28
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001000:	2300      	movs	r3, #0
 8001002:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d005      	beq.n	800101c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2204      	movs	r2, #4
 8001014:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	73fb      	strb	r3, [r7, #15]
 800101a:	e029      	b.n	8001070 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 020e 	bic.w	r2, r2, #14
 800102a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f022 0201 	bic.w	r2, r2, #1
 800103a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f003 021c 	and.w	r2, r3, #28
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	2101      	movs	r1, #1
 800104a:	fa01 f202 	lsl.w	r2, r1, r2
 800104e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2201      	movs	r2, #1
 8001054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	4798      	blx	r3
    }
  }
  return status;
 8001070:	7bfb      	ldrb	r3, [r7, #15]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001092:	e160      	b.n	8001356 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	fa01 f303 	lsl.w	r3, r1, r3
 80010a0:	4013      	ands	r3, r2
 80010a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f000 8152 	beq.w	8001350 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0303 	and.w	r3, r3, #3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d005      	beq.n	80010c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 0201 	and.w	r2, r3, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f003 0303 	and.w	r3, r3, #3
 800112e:	2b03      	cmp	r3, #3
 8001130:	d017      	beq.n	8001162 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	68db      	ldr	r3, [r3, #12]
 8001136:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	2203      	movs	r2, #3
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0303 	and.w	r3, r3, #3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d123      	bne.n	80011b6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	08da      	lsrs	r2, r3, #3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3208      	adds	r2, #8
 8001176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	220f      	movs	r2, #15
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	691a      	ldr	r2, [r3, #16]
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	08da      	lsrs	r2, r3, #3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3208      	adds	r2, #8
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	2203      	movs	r2, #3
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f003 0203 	and.w	r2, r3, #3
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80ac 	beq.w	8001350 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f8:	4b5e      	ldr	r3, [pc, #376]	; (8001374 <HAL_GPIO_Init+0x2f8>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a5d      	ldr	r2, [pc, #372]	; (8001374 <HAL_GPIO_Init+0x2f8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	4b5b      	ldr	r3, [pc, #364]	; (8001374 <HAL_GPIO_Init+0x2f8>)
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001210:	4a59      	ldr	r2, [pc, #356]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0303 	and.w	r3, r3, #3
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	220f      	movs	r2, #15
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a51      	ldr	r2, [pc, #324]	; (800137c <HAL_GPIO_Init+0x300>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d025      	beq.n	8001288 <HAL_GPIO_Init+0x20c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a50      	ldr	r2, [pc, #320]	; (8001380 <HAL_GPIO_Init+0x304>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d01f      	beq.n	8001284 <HAL_GPIO_Init+0x208>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4f      	ldr	r2, [pc, #316]	; (8001384 <HAL_GPIO_Init+0x308>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_GPIO_Init+0x204>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_GPIO_Init+0x30c>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x200>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4d      	ldr	r2, [pc, #308]	; (800138c <HAL_GPIO_Init+0x310>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1fc>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4c      	ldr	r2, [pc, #304]	; (8001390 <HAL_GPIO_Init+0x314>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1f8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a4b      	ldr	r2, [pc, #300]	; (8001394 <HAL_GPIO_Init+0x318>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1f4>
 800126c:	2306      	movs	r3, #6
 800126e:	e00c      	b.n	800128a <HAL_GPIO_Init+0x20e>
 8001270:	2307      	movs	r3, #7
 8001272:	e00a      	b.n	800128a <HAL_GPIO_Init+0x20e>
 8001274:	2305      	movs	r3, #5
 8001276:	e008      	b.n	800128a <HAL_GPIO_Init+0x20e>
 8001278:	2304      	movs	r3, #4
 800127a:	e006      	b.n	800128a <HAL_GPIO_Init+0x20e>
 800127c:	2303      	movs	r3, #3
 800127e:	e004      	b.n	800128a <HAL_GPIO_Init+0x20e>
 8001280:	2302      	movs	r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x20e>
 8001284:	2301      	movs	r3, #1
 8001286:	e000      	b.n	800128a <HAL_GPIO_Init+0x20e>
 8001288:	2300      	movs	r3, #0
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	f002 0203 	and.w	r2, r2, #3
 8001290:	0092      	lsls	r2, r2, #2
 8001292:	4093      	lsls	r3, r2
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800129a:	4937      	ldr	r1, [pc, #220]	; (8001378 <HAL_GPIO_Init+0x2fc>)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3302      	adds	r3, #2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a8:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_GPIO_Init+0x31c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d003      	beq.n	80012cc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012cc:	4a32      	ldr	r2, [pc, #200]	; (8001398 <HAL_GPIO_Init+0x31c>)
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_GPIO_Init+0x31c>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012f6:	4a28      	ldr	r2, [pc, #160]	; (8001398 <HAL_GPIO_Init+0x31c>)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fc:	4b26      	ldr	r3, [pc, #152]	; (8001398 <HAL_GPIO_Init+0x31c>)
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4313      	orrs	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_GPIO_Init+0x31c>)
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_GPIO_Init+0x31c>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <HAL_GPIO_Init+0x31c>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	3301      	adds	r3, #1
 8001354:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	2b00      	cmp	r3, #0
 8001362:	f47f ae97 	bne.w	8001094 <HAL_GPIO_Init+0x18>
  }
}
 8001366:	bf00      	nop
 8001368:	bf00      	nop
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40010000 	.word	0x40010000
 800137c:	40020000 	.word	0x40020000
 8001380:	40020400 	.word	0x40020400
 8001384:	40020800 	.word	0x40020800
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40021000 	.word	0x40021000
 8001390:	40021400 	.word	0x40021400
 8001394:	40021800 	.word	0x40021800
 8001398:	40010400 	.word	0x40010400

0800139c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	807b      	strh	r3, [r7, #2]
 80013a8:	4613      	mov	r3, r2
 80013aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ac:	787b      	ldrb	r3, [r7, #1]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013b8:	e003      	b.n	80013c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013ba:	887b      	ldrh	r3, [r7, #2]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e12b      	b.n	8001636 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff f8da 	bl	80005ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0201 	bic.w	r2, r2, #1
 800140e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800141e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800142e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001430:	f000 fe7e 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 8001434:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a81      	ldr	r2, [pc, #516]	; (8001640 <HAL_I2C_Init+0x274>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d807      	bhi.n	8001450 <HAL_I2C_Init+0x84>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a80      	ldr	r2, [pc, #512]	; (8001644 <HAL_I2C_Init+0x278>)
 8001444:	4293      	cmp	r3, r2
 8001446:	bf94      	ite	ls
 8001448:	2301      	movls	r3, #1
 800144a:	2300      	movhi	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	e006      	b.n	800145e <HAL_I2C_Init+0x92>
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4a7d      	ldr	r2, [pc, #500]	; (8001648 <HAL_I2C_Init+0x27c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	bf94      	ite	ls
 8001458:	2301      	movls	r3, #1
 800145a:	2300      	movhi	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e0e7      	b.n	8001636 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4a78      	ldr	r2, [pc, #480]	; (800164c <HAL_I2C_Init+0x280>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0c9b      	lsrs	r3, r3, #18
 8001470:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6a1b      	ldr	r3, [r3, #32]
 800148c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4a6a      	ldr	r2, [pc, #424]	; (8001640 <HAL_I2C_Init+0x274>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d802      	bhi.n	80014a0 <HAL_I2C_Init+0xd4>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	3301      	adds	r3, #1
 800149e:	e009      	b.n	80014b4 <HAL_I2C_Init+0xe8>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014a6:	fb02 f303 	mul.w	r3, r2, r3
 80014aa:	4a69      	ldr	r2, [pc, #420]	; (8001650 <HAL_I2C_Init+0x284>)
 80014ac:	fba2 2303 	umull	r2, r3, r2, r3
 80014b0:	099b      	lsrs	r3, r3, #6
 80014b2:	3301      	adds	r3, #1
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	430b      	orrs	r3, r1
 80014ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80014c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	495c      	ldr	r1, [pc, #368]	; (8001640 <HAL_I2C_Init+0x274>)
 80014d0:	428b      	cmp	r3, r1
 80014d2:	d819      	bhi.n	8001508 <HAL_I2C_Init+0x13c>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e59      	subs	r1, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fbb1 f3f3 	udiv	r3, r1, r3
 80014e2:	1c59      	adds	r1, r3, #1
 80014e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014e8:	400b      	ands	r3, r1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <HAL_I2C_Init+0x138>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	1e59      	subs	r1, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001502:	e051      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001504:	2304      	movs	r3, #4
 8001506:	e04f      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d111      	bne.n	8001534 <HAL_I2C_Init+0x168>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1e58      	subs	r0, r3, #1
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	440b      	add	r3, r1
 800151e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001522:	3301      	adds	r3, #1
 8001524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf0c      	ite	eq
 800152c:	2301      	moveq	r3, #1
 800152e:	2300      	movne	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	e012      	b.n	800155a <HAL_I2C_Init+0x18e>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	1e58      	subs	r0, r3, #1
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	0099      	lsls	r1, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	fbb0 f3f3 	udiv	r3, r0, r3
 800154a:	3301      	adds	r3, #1
 800154c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf0c      	ite	eq
 8001554:	2301      	moveq	r3, #1
 8001556:	2300      	movne	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Init+0x196>
 800155e:	2301      	movs	r3, #1
 8001560:	e022      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10e      	bne.n	8001588 <HAL_I2C_Init+0x1bc>
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1e58      	subs	r0, r3, #1
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	440b      	add	r3, r1
 8001578:	fbb0 f3f3 	udiv	r3, r0, r3
 800157c:	3301      	adds	r3, #1
 800157e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001586:	e00f      	b.n	80015a8 <HAL_I2C_Init+0x1dc>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e58      	subs	r0, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	0099      	lsls	r1, r3, #2
 8001598:	440b      	add	r3, r1
 800159a:	fbb0 f3f3 	udiv	r3, r0, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	6809      	ldr	r1, [r1, #0]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80015d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6911      	ldr	r1, [r2, #16]
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	68d2      	ldr	r2, [r2, #12]
 80015e2:	4311      	orrs	r1, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	3710      	adds	r7, #16
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	000186a0 	.word	0x000186a0
 8001644:	001e847f 	.word	0x001e847f
 8001648:	003d08ff 	.word	0x003d08ff
 800164c:	431bde83 	.word	0x431bde83
 8001650:	10624dd3 	.word	0x10624dd3

08001654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d101      	bne.n	8001666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e31d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	4b94      	ldr	r3, [pc, #592]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001670:	4b91      	ldr	r3, [pc, #580]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001678:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	2b00      	cmp	r3, #0
 8001684:	d07b      	beq.n	800177e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	2b08      	cmp	r3, #8
 800168a:	d006      	beq.n	800169a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d10f      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5e>
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d10b      	bne.n	80016b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169a:	4b87      	ldr	r3, [pc, #540]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d06a      	beq.n	800177c <HAL_RCC_OscConfig+0x128>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d166      	bne.n	800177c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e2f7      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d106      	bne.n	80016c8 <HAL_RCC_OscConfig+0x74>
 80016ba:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a7e      	ldr	r2, [pc, #504]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e02d      	b.n	8001724 <HAL_RCC_OscConfig+0xd0>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d10c      	bne.n	80016ea <HAL_RCC_OscConfig+0x96>
 80016d0:	4b79      	ldr	r3, [pc, #484]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b76      	ldr	r3, [pc, #472]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a75      	ldr	r2, [pc, #468]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e01c      	b.n	8001724 <HAL_RCC_OscConfig+0xd0>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d10c      	bne.n	800170c <HAL_RCC_OscConfig+0xb8>
 80016f2:	4b71      	ldr	r3, [pc, #452]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a70      	ldr	r2, [pc, #448]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80016f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b6e      	ldr	r3, [pc, #440]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a6d      	ldr	r2, [pc, #436]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001708:	6013      	str	r3, [r2, #0]
 800170a:	e00b      	b.n	8001724 <HAL_RCC_OscConfig+0xd0>
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a69      	ldr	r2, [pc, #420]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a66      	ldr	r2, [pc, #408]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800171e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d013      	beq.n	8001754 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb10 	bl	8000d50 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fb0c 	bl	8000d50 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e2ad      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001746:	4b5c      	ldr	r3, [pc, #368]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0xe0>
 8001752:	e014      	b.n	800177e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001754:	f7ff fafc 	bl	8000d50 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800175c:	f7ff faf8 	bl	8000d50 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b64      	cmp	r3, #100	; 0x64
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e299      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800176e:	4b52      	ldr	r3, [pc, #328]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x108>
 800177a:	e000      	b.n	800177e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d05a      	beq.n	8001840 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b04      	cmp	r3, #4
 800178e:	d005      	beq.n	800179c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d119      	bne.n	80017ca <HAL_RCC_OscConfig+0x176>
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d116      	bne.n	80017ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179c:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x160>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e276      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b4:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	493d      	ldr	r1, [pc, #244]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c8:	e03a      	b.n	8001840 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d020      	beq.n	8001814 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d2:	4b3a      	ldr	r3, [pc, #232]	; (80018bc <HAL_RCC_OscConfig+0x268>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff faba 	bl	8000d50 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff fab6 	bl	8000d50 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e257      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	691b      	ldr	r3, [r3, #16]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	492a      	ldr	r1, [pc, #168]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
 8001812:	e015      	b.n	8001840 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <HAL_RCC_OscConfig+0x268>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fa99 	bl	8000d50 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fa95 	bl	8000d50 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e236      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001834:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80b8 	beq.w	80019be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d170      	bne.n	8001936 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001854:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_OscConfig+0x218>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d101      	bne.n	800186c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e21a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001878:	429a      	cmp	r2, r3
 800187a:	d921      	bls.n	80018c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fc7d 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e208      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	4906      	ldr	r1, [pc, #24]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	061b      	lsls	r3, r3, #24
 80018b0:	4901      	ldr	r1, [pc, #4]	; (80018b8 <HAL_RCC_OscConfig+0x264>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
 80018b6:	e020      	b.n	80018fa <HAL_RCC_OscConfig+0x2a6>
 80018b8:	40023800 	.word	0x40023800
 80018bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018c0:	4b99      	ldr	r3, [pc, #612]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4996      	ldr	r1, [pc, #600]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d2:	4b95      	ldr	r3, [pc, #596]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	061b      	lsls	r3, r3, #24
 80018e0:	4991      	ldr	r1, [pc, #580]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fc48 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e1d3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	0b5b      	lsrs	r3, r3, #13
 8001900:	3301      	adds	r3, #1
 8001902:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800190a:	4a87      	ldr	r2, [pc, #540]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 800190c:	6892      	ldr	r2, [r2, #8]
 800190e:	0912      	lsrs	r2, r2, #4
 8001910:	f002 020f 	and.w	r2, r2, #15
 8001914:	4985      	ldr	r1, [pc, #532]	; (8001b2c <HAL_RCC_OscConfig+0x4d8>)
 8001916:	5c8a      	ldrb	r2, [r1, r2]
 8001918:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800191a:	4a85      	ldr	r2, [pc, #532]	; (8001b30 <HAL_RCC_OscConfig+0x4dc>)
 800191c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800191e:	4b85      	ldr	r3, [pc, #532]	; (8001b34 <HAL_RCC_OscConfig+0x4e0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f9c8 	bl	8000cb8 <HAL_InitTick>
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d045      	beq.n	80019be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	e1b5      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d029      	beq.n	8001992 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800193e:	4b7e      	ldr	r3, [pc, #504]	; (8001b38 <HAL_RCC_OscConfig+0x4e4>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fa04 	bl	8000d50 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800194c:	f7ff fa00 	bl	8000d50 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1a1      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800195e:	4b72      	ldr	r3, [pc, #456]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800196a:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	496c      	ldr	r1, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800197c:	4b6a      	ldr	r3, [pc, #424]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	061b      	lsls	r3, r3, #24
 800198a:	4967      	ldr	r1, [pc, #412]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 800198c:	4313      	orrs	r3, r2
 800198e:	604b      	str	r3, [r1, #4]
 8001990:	e015      	b.n	80019be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001992:	4b69      	ldr	r3, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x4e4>)
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff f9da 	bl	8000d50 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019a0:	f7ff f9d6 	bl	8000d50 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e177      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019b2:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d030      	beq.n	8001a2c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d016      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d2:	4b5a      	ldr	r3, [pc, #360]	; (8001b3c <HAL_RCC_OscConfig+0x4e8>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d8:	f7ff f9ba 	bl	8000d50 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019e0:	f7ff f9b6 	bl	8000d50 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e157      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019f2:	4b4d      	ldr	r3, [pc, #308]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 80019f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0f0      	beq.n	80019e0 <HAL_RCC_OscConfig+0x38c>
 80019fe:	e015      	b.n	8001a2c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a00:	4b4e      	ldr	r3, [pc, #312]	; (8001b3c <HAL_RCC_OscConfig+0x4e8>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a06:	f7ff f9a3 	bl	8000d50 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0e:	f7ff f99f 	bl	8000d50 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e140      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a20:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a24:	f003 0302 	and.w	r3, r3, #2
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80b5 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10d      	bne.n	8001a66 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a54:	6253      	str	r3, [r2, #36]	; 0x24
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	60bb      	str	r3, [r7, #8]
 8001a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a62:	2301      	movs	r3, #1
 8001a64:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d118      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a72:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a32      	ldr	r2, [pc, #200]	; (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f967 	bl	8000d50 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a86:	f7ff f963 	bl	8000d50 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e104      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a98:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <HAL_RCC_OscConfig+0x4ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x466>
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab0:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8001ab8:	e02d      	b.n	8001b16 <HAL_RCC_OscConfig+0x4c2>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x488>
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001acc:	6353      	str	r3, [r2, #52]	; 0x34
 8001ace:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001ad4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ad8:	6353      	str	r3, [r2, #52]	; 0x34
 8001ada:	e01c      	b.n	8001b16 <HAL_RCC_OscConfig+0x4c2>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d10c      	bne.n	8001afe <HAL_RCC_OscConfig+0x4aa>
 8001ae4:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aee:	6353      	str	r3, [r2, #52]	; 0x34
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af4:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001afa:	6353      	str	r3, [r2, #52]	; 0x34
 8001afc:	e00b      	b.n	8001b16 <HAL_RCC_OscConfig+0x4c2>
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b08:	6353      	str	r3, [r2, #52]	; 0x34
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b0e:	4a06      	ldr	r2, [pc, #24]	; (8001b28 <HAL_RCC_OscConfig+0x4d4>)
 8001b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001b14:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d024      	beq.n	8001b68 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff f917 	bl	8000d50 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b24:	e019      	b.n	8001b5a <HAL_RCC_OscConfig+0x506>
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	08003620 	.word	0x08003620
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004
 8001b38:	42470020 	.word	0x42470020
 8001b3c:	42470680 	.word	0x42470680
 8001b40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff f904 	bl	8000d50 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0a3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4f0>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff f8f2 	bl	8000d50 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff f8ee 	bl	8000d50 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e08d      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b92:	7ffb      	ldrb	r3, [r7, #31]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b44      	ldr	r3, [pc, #272]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	4a43      	ldr	r2, [pc, #268]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d079      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	d056      	beq.n	8001c60 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d13b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x65c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff f8c6 	bl	8000d50 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f8c2 	bl	8000d50 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e063      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bda:	4b34      	ldr	r3, [pc, #208]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	4319      	orrs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	492b      	ldr	r1, [pc, #172]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x65c>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f8a1 	bl	8000d50 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f89d 	bl	8000d50 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e03e      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c24:	4b21      	ldr	r3, [pc, #132]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x5be>
 8001c30:	e036      	b.n	8001ca0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b1f      	ldr	r3, [pc, #124]	; (8001cb0 <HAL_RCC_OscConfig+0x65c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c38:	f7ff f88a 	bl	8000d50 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f886 	bl	8000d50 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e027      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c52:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x5ec>
 8001c5e:	e01f      	b.n	8001ca0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_RCC_OscConfig+0x658>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d10d      	bne.n	8001c9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d106      	bne.n	8001c9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d001      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3720      	adds	r7, #32
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	42470060 	.word	0x42470060

08001cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e11a      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc8:	4b8f      	ldr	r3, [pc, #572]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d919      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x34>
 8001cdc:	4b8a      	ldr	r3, [pc, #552]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a89      	ldr	r2, [pc, #548]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6013      	str	r3, [r2, #0]
 8001ce8:	4b87      	ldr	r3, [pc, #540]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f023 0201 	bic.w	r2, r3, #1
 8001cf0:	4985      	ldr	r1, [pc, #532]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf8:	4b83      	ldr	r3, [pc, #524]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0f9      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d008      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d16:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	497a      	ldr	r1, [pc, #488]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 808e 	beq.w	8001e52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d3e:	4b73      	ldr	r3, [pc, #460]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d121      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0d7      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d107      	bne.n	8001d66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d56:	4b6d      	ldr	r3, [pc, #436]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0cb      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d6e:	4b67      	ldr	r3, [pc, #412]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e0bf      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d7e:	4b63      	ldr	r3, [pc, #396]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0b7      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b5f      	ldr	r3, [pc, #380]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	495c      	ldr	r1, [pc, #368]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7fe ffd6 	bl	8000d50 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d112      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db0:	f7fe ffce 	bl	8000d50 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e09b      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dc6:	4b51      	ldr	r3, [pc, #324]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d1ee      	bne.n	8001db0 <HAL_RCC_ClockConfig+0xfc>
 8001dd2:	e03e      	b.n	8001e52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d112      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ddc:	e00a      	b.n	8001df4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dde:	f7fe ffb7 	bl	8000d50 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e084      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001df4:	4b45      	ldr	r3, [pc, #276]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b0c      	cmp	r3, #12
 8001dfe:	d1ee      	bne.n	8001dde <HAL_RCC_ClockConfig+0x12a>
 8001e00:	e027      	b.n	8001e52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d11d      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e0c:	f7fe ffa0 	bl	8000d50 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e06d      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e22:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d1ee      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x158>
 8001e2e:	e010      	b.n	8001e52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e30:	f7fe ff8e 	bl	8000d50 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e05b      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e46:	4b31      	ldr	r3, [pc, #196]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d219      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d105      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x1be>
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a27      	ldr	r2, [pc, #156]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	4b25      	ldr	r3, [pc, #148]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f023 0201 	bic.w	r2, r3, #1
 8001e7a:	4923      	ldr	r1, [pc, #140]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_RCC_ClockConfig+0x254>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e034      	b.n	8001efe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4917      	ldr	r1, [pc, #92]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	490f      	ldr	r1, [pc, #60]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ed2:	f000 f823 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_ClockConfig+0x258>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	490b      	ldr	r1, [pc, #44]	; (8001f10 <HAL_RCC_ClockConfig+0x25c>)
 8001ee4:	5ccb      	ldrb	r3, [r1, r3]
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fee0 	bl	8000cb8 <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001efc:	7afb      	ldrb	r3, [r7, #11]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40023c00 	.word	0x40023c00
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	08003620 	.word	0x08003620
 8001f14:	20000000 	.word	0x20000000
 8001f18:	20000004 	.word	0x20000004

08001f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f20:	b092      	sub	sp, #72	; 0x48
 8001f22:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001f24:	4b79      	ldr	r3, [pc, #484]	; (800210c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f2c:	f003 030c 	and.w	r3, r3, #12
 8001f30:	2b0c      	cmp	r3, #12
 8001f32:	d00d      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x34>
 8001f34:	2b0c      	cmp	r3, #12
 8001f36:	f200 80d5 	bhi.w	80020e4 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x28>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x2e>
 8001f42:	e0cf      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f44:	4b72      	ldr	r3, [pc, #456]	; (8002110 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001f46:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001f48:	e0da      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b72      	ldr	r3, [pc, #456]	; (8002114 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001f4c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001f4e:	e0d7      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	f003 020f 	and.w	r2, r3, #15
 8001f58:	4b6f      	ldr	r3, [pc, #444]	; (8002118 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f5a:	5c9b      	ldrb	r3, [r3, r2]
 8001f5c:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f60:	0d9b      	lsrs	r3, r3, #22
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	3301      	adds	r3, #1
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f6a:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d05d      	beq.n	8002032 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	2200      	movs	r2, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	4604      	mov	r4, r0
 8001f80:	460d      	mov	r5, r1
 8001f82:	4622      	mov	r2, r4
 8001f84:	462b      	mov	r3, r5
 8001f86:	f04f 0000 	mov.w	r0, #0
 8001f8a:	f04f 0100 	mov.w	r1, #0
 8001f8e:	0159      	lsls	r1, r3, #5
 8001f90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f94:	0150      	lsls	r0, r2, #5
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	1a51      	subs	r1, r2, r1
 8001f9e:	6139      	str	r1, [r7, #16]
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	f04f 0300 	mov.w	r3, #0
 8001fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fb4:	4659      	mov	r1, fp
 8001fb6:	018b      	lsls	r3, r1, #6
 8001fb8:	4651      	mov	r1, sl
 8001fba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fbe:	4651      	mov	r1, sl
 8001fc0:	018a      	lsls	r2, r1, #6
 8001fc2:	46d4      	mov	ip, sl
 8001fc4:	ebb2 080c 	subs.w	r8, r2, ip
 8001fc8:	4659      	mov	r1, fp
 8001fca:	eb63 0901 	sbc.w	r9, r3, r1
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fe2:	4690      	mov	r8, r2
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	4623      	mov	r3, r4
 8001fe8:	eb18 0303 	adds.w	r3, r8, r3
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	462b      	mov	r3, r5
 8001ff0:	eb49 0303 	adc.w	r3, r9, r3
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	f04f 0300 	mov.w	r3, #0
 8001ffe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002002:	4629      	mov	r1, r5
 8002004:	024b      	lsls	r3, r1, #9
 8002006:	4620      	mov	r0, r4
 8002008:	4629      	mov	r1, r5
 800200a:	4604      	mov	r4, r0
 800200c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8002010:	4601      	mov	r1, r0
 8002012:	024a      	lsls	r2, r1, #9
 8002014:	4610      	mov	r0, r2
 8002016:	4619      	mov	r1, r3
 8002018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800201a:	2200      	movs	r2, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
 800201e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002020:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002024:	f7fe f8aa 	bl	800017c <__aeabi_uldivmod>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4613      	mov	r3, r2
 800202e:	647b      	str	r3, [r7, #68]	; 0x44
 8002030:	e055      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	623b      	str	r3, [r7, #32]
 8002038:	627a      	str	r2, [r7, #36]	; 0x24
 800203a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800203e:	4642      	mov	r2, r8
 8002040:	464b      	mov	r3, r9
 8002042:	f04f 0000 	mov.w	r0, #0
 8002046:	f04f 0100 	mov.w	r1, #0
 800204a:	0159      	lsls	r1, r3, #5
 800204c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002050:	0150      	lsls	r0, r2, #5
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	46c4      	mov	ip, r8
 8002058:	ebb2 0a0c 	subs.w	sl, r2, ip
 800205c:	4640      	mov	r0, r8
 800205e:	4649      	mov	r1, r9
 8002060:	468c      	mov	ip, r1
 8002062:	eb63 0b0c 	sbc.w	fp, r3, ip
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002072:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002076:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800207a:	ebb2 040a 	subs.w	r4, r2, sl
 800207e:	eb63 050b 	sbc.w	r5, r3, fp
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	00eb      	lsls	r3, r5, #3
 800208c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002090:	00e2      	lsls	r2, r4, #3
 8002092:	4614      	mov	r4, r2
 8002094:	461d      	mov	r5, r3
 8002096:	4603      	mov	r3, r0
 8002098:	18e3      	adds	r3, r4, r3
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	460b      	mov	r3, r1
 800209e:	eb45 0303 	adc.w	r3, r5, r3
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020b0:	4629      	mov	r1, r5
 80020b2:	028b      	lsls	r3, r1, #10
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	4604      	mov	r4, r0
 80020ba:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80020be:	4601      	mov	r1, r0
 80020c0:	028a      	lsls	r2, r1, #10
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	2200      	movs	r2, #0
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	61fa      	str	r2, [r7, #28]
 80020ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020d2:	f7fe f853 	bl	800017c <__aeabi_uldivmod>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4613      	mov	r3, r2
 80020dc:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 80020de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020e0:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80020e2:	e00d      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	0b5b      	lsrs	r3, r3, #13
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	3301      	adds	r3, #1
 80020f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 80020fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8002102:	4618      	mov	r0, r3
 8002104:	3748      	adds	r7, #72	; 0x48
 8002106:	46bd      	mov	sp, r7
 8002108:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	00f42400 	.word	0x00f42400
 8002114:	007a1200 	.word	0x007a1200
 8002118:	08003614 	.word	0x08003614

0800211c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002120:	4b02      	ldr	r3, [pc, #8]	; (800212c <HAL_RCC_GetHCLKFreq+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000000 	.word	0x20000000

08002130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002134:	f7ff fff2 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800
 8002154:	08003630 	.word	0x08003630

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800215c:	f7ff ffde 	bl	800211c <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0adb      	lsrs	r3, r3, #11
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	08003630 	.word	0x08003630

08002180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d12c      	bne.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002198:	4b26      	ldr	r3, [pc, #152]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021a4:	4b24      	ldr	r3, [pc, #144]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	e016      	b.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b0:	4b20      	ldr	r3, [pc, #128]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ba:	6253      	str	r3, [r2, #36]	; 0x24
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80021d0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b18      	ldr	r3, [pc, #96]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	4a17      	ldr	r2, [pc, #92]	; (8002234 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80021e4:	d105      	bne.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80021ec:	d101      	bne.n	80021f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80021ee:	2301      	movs	r3, #1
 80021f0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80021f8:	4b10      	ldr	r3, [pc, #64]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	4b0d      	ldr	r3, [pc, #52]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 0201 	bic.w	r2, r3, #1
 800220c:	490b      	ldr	r1, [pc, #44]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	429a      	cmp	r2, r3
 8002220:	d001      	beq.n	8002226 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	371c      	adds	r7, #28
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	40023c00 	.word	0x40023c00

08002240 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e031      	b.n	80022b6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7fe fbd2 	bl	8000a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f000 fac6 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e031      	b.n	8002334 <HAL_TIM_IC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d106      	bne.n	80022ea <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f829 	bl	800233c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2202      	movs	r2, #2
 80022ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3304      	adds	r3, #4
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 fa87 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b02      	cmp	r3, #2
 8002362:	d122      	bne.n	80023aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b02      	cmp	r3, #2
 8002370:	d11b      	bne.n	80023aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f06f 0202 	mvn.w	r2, #2
 800237a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 fa22 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 8002396:	e005      	b.n	80023a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fa15 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fa24 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d122      	bne.n	80023fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	f003 0304 	and.w	r3, r3, #4
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d11b      	bne.n	80023fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f06f 0204 	mvn.w	r2, #4
 80023ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2202      	movs	r2, #2
 80023d4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 f9f8 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 80023ea:	e005      	b.n	80023f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f9eb 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f9fa 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b08      	cmp	r3, #8
 800240a:	d122      	bne.n	8002452 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11b      	bne.n	8002452 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f06f 0208 	mvn.w	r2, #8
 8002422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 f9ce 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 800243e:	e005      	b.n	800244c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f9c1 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f9d0 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0310 	and.w	r3, r3, #16
 800245c:	2b10      	cmp	r3, #16
 800245e:	d122      	bne.n	80024a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b10      	cmp	r3, #16
 800246c:	d11b      	bne.n	80024a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0210 	mvn.w	r2, #16
 8002476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2208      	movs	r2, #8
 800247c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f9a4 	bl	80027da <HAL_TIM_IC_CaptureCallback>
 8002492:	e005      	b.n	80024a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f997 	bl	80027c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f9a6 	bl	80027ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d10e      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f06f 0201 	mvn.w	r2, #1
 80024ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f972 	bl	80027b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d10e      	bne.n	80024fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d107      	bne.n	80024fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f980 	bl	80027fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_TIM_IC_ConfigChannel+0x1a>
 800251c:	2302      	movs	r3, #2
 800251e:	e082      	b.n	8002626 <HAL_TIM_IC_ConfigChannel+0x120>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  if (Channel == TIM_CHANNEL_1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11b      	bne.n	8002566 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6818      	ldr	r0, [r3, #0]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f000 f9d7 	bl	80028f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699a      	ldr	r2, [r3, #24]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 020c 	bic.w	r2, r2, #12
 8002550:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6999      	ldr	r1, [r3, #24]
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	619a      	str	r2, [r3, #24]
 8002564:	e05a      	b.n	800261c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11c      	bne.n	80025a6 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f000 fa46 	bl	8002a0c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800258e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6999      	ldr	r1, [r3, #24]
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	021a      	lsls	r2, r3, #8
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	619a      	str	r2, [r3, #24]
 80025a4:	e03a      	b.n	800261c <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d11b      	bne.n	80025e4 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f000 fa91 	bl	8002ae2 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 020c 	bic.w	r2, r2, #12
 80025ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	69d9      	ldr	r1, [r3, #28]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	61da      	str	r2, [r3, #28]
 80025e2:	e01b      	b.n	800261c <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f000 fab0 	bl	8002b58 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	69da      	ldr	r2, [r3, #28]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002606:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69d9      	ldr	r1, [r3, #28]
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	021a      	lsls	r2, r3, #8
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_TIM_ConfigClockSource+0x18>
 8002642:	2302      	movs	r3, #2
 8002644:	e0b3      	b.n	80027ae <HAL_TIM_ConfigClockSource+0x180>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002664:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800266c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800267e:	d03e      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0xd0>
 8002680:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002684:	f200 8087 	bhi.w	8002796 <HAL_TIM_ConfigClockSource+0x168>
 8002688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800268c:	f000 8085 	beq.w	800279a <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002694:	d87f      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 8002696:	2b70      	cmp	r3, #112	; 0x70
 8002698:	d01a      	beq.n	80026d0 <HAL_TIM_ConfigClockSource+0xa2>
 800269a:	2b70      	cmp	r3, #112	; 0x70
 800269c:	d87b      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 800269e:	2b60      	cmp	r3, #96	; 0x60
 80026a0:	d050      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0x116>
 80026a2:	2b60      	cmp	r3, #96	; 0x60
 80026a4:	d877      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 80026a6:	2b50      	cmp	r3, #80	; 0x50
 80026a8:	d03c      	beq.n	8002724 <HAL_TIM_ConfigClockSource+0xf6>
 80026aa:	2b50      	cmp	r3, #80	; 0x50
 80026ac:	d873      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 80026ae:	2b40      	cmp	r3, #64	; 0x40
 80026b0:	d058      	beq.n	8002764 <HAL_TIM_ConfigClockSource+0x136>
 80026b2:	2b40      	cmp	r3, #64	; 0x40
 80026b4:	d86f      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 80026b6:	2b30      	cmp	r3, #48	; 0x30
 80026b8:	d064      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x156>
 80026ba:	2b30      	cmp	r3, #48	; 0x30
 80026bc:	d86b      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d060      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x156>
 80026c2:	2b20      	cmp	r3, #32
 80026c4:	d867      	bhi.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d05c      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x156>
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d05a      	beq.n	8002784 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80026ce:	e062      	b.n	8002796 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f000 fa90 	bl	8002c04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	609a      	str	r2, [r3, #8]
      break;
 80026fc:	e04e      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6899      	ldr	r1, [r3, #8]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f000 fa79 	bl	8002c04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002720:	609a      	str	r2, [r3, #8]
      break;
 8002722:	e03b      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	461a      	mov	r2, r3
 8002732:	f000 f93d 	bl	80029b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2150      	movs	r1, #80	; 0x50
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa47 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 8002742:	e02b      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	461a      	mov	r2, r3
 8002752:	f000 f997 	bl	8002a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2160      	movs	r1, #96	; 0x60
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa37 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 8002762:	e01b      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6818      	ldr	r0, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	6859      	ldr	r1, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	461a      	mov	r2, r3
 8002772:	f000 f91d 	bl	80029b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fa27 	bl	8002bd0 <TIM_ITRx_SetConfig>
      break;
 8002782:	e00b      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 fa1e 	bl	8002bd0 <TIM_ITRx_SetConfig>
        break;
 8002794:	e002      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002796:	bf00      	nop
 8002798:	e000      	b.n	800279c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800279a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027e2:	bf00      	nop
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002826:	d00f      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a2b      	ldr	r2, [pc, #172]	; (80028d8 <TIM_Base_SetConfig+0xc8>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00b      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <TIM_Base_SetConfig+0xcc>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a29      	ldr	r2, [pc, #164]	; (80028e0 <TIM_Base_SetConfig+0xd0>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d003      	beq.n	8002848 <TIM_Base_SetConfig+0x38>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <TIM_Base_SetConfig+0xd4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d017      	beq.n	8002892 <TIM_Base_SetConfig+0x82>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <TIM_Base_SetConfig+0xc8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <TIM_Base_SetConfig+0x82>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a1b      	ldr	r2, [pc, #108]	; (80028dc <TIM_Base_SetConfig+0xcc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00f      	beq.n	8002892 <TIM_Base_SetConfig+0x82>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a1a      	ldr	r2, [pc, #104]	; (80028e0 <TIM_Base_SetConfig+0xd0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d00b      	beq.n	8002892 <TIM_Base_SetConfig+0x82>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <TIM_Base_SetConfig+0xd4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d007      	beq.n	8002892 <TIM_Base_SetConfig+0x82>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a18      	ldr	r2, [pc, #96]	; (80028e8 <TIM_Base_SetConfig+0xd8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d003      	beq.n	8002892 <TIM_Base_SetConfig+0x82>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <TIM_Base_SetConfig+0xdc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d108      	bne.n	80028a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002898:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	615a      	str	r2, [r3, #20]
}
 80028ce:	bf00      	nop
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40000400 	.word	0x40000400
 80028dc:	40000800 	.word	0x40000800
 80028e0:	40000c00 	.word	0x40000c00
 80028e4:	40010800 	.word	0x40010800
 80028e8:	40010c00 	.word	0x40010c00
 80028ec:	40011000 	.word	0x40011000

080028f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f023 0201 	bic.w	r2, r3, #1
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800291c:	d00f      	beq.n	800293e <TIM_TI1_SetConfig+0x4e>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <TIM_TI1_SetConfig+0xb0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00b      	beq.n	800293e <TIM_TI1_SetConfig+0x4e>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <TIM_TI1_SetConfig+0xb4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <TIM_TI1_SetConfig+0x4e>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <TIM_TI1_SetConfig+0xb8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d003      	beq.n	800293e <TIM_TI1_SetConfig+0x4e>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <TIM_TI1_SetConfig+0xbc>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <TIM_TI1_SetConfig+0x52>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <TIM_TI1_SetConfig+0x54>
 8002942:	2300      	movs	r3, #0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d008      	beq.n	800295a <TIM_TI1_SetConfig+0x6a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0303 	bic.w	r3, r3, #3
 800294e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4313      	orrs	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	e003      	b.n	8002962 <TIM_TI1_SetConfig+0x72>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	b2db      	uxtb	r3, r3
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f023 030a 	bic.w	r3, r3, #10
 800297c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 030a 	and.w	r3, r3, #10
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	621a      	str	r2, [r3, #32]
}
 8002996:	bf00      	nop
 8002998:	371c      	adds	r7, #28
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40000400 	.word	0x40000400
 80029a4:	40000800 	.word	0x40000800
 80029a8:	40000c00 	.word	0x40000c00
 80029ac:	40010800 	.word	0x40010800

080029b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f023 0201 	bic.w	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f023 030a 	bic.w	r3, r3, #10
 80029ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	621a      	str	r2, [r3, #32]
}
 8002a02:	bf00      	nop
 8002a04:	371c      	adds	r7, #28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr

08002a0c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a1b      	ldr	r3, [r3, #32]
 8002a1e:	f023 0210 	bic.w	r2, r3, #16
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	031b      	lsls	r3, r3, #12
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	621a      	str	r2, [r3, #32]
}
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b087      	sub	sp, #28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f023 0210 	bic.w	r2, r3, #16
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	031b      	lsls	r3, r3, #12
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ac0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	011b      	lsls	r3, r3, #4
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	621a      	str	r2, [r3, #32]
}
 8002ad8:	bf00      	nop
 8002ada:	371c      	adds	r7, #28
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b087      	sub	sp, #28
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
 8002aee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b1e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002b32:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	621a      	str	r2, [r3, #32]
}
 8002b4e:	bf00      	nop
 8002b50:	371c      	adds	r7, #28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
 8002b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	031b      	lsls	r3, r3, #12
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002baa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	621a      	str	r2, [r3, #32]
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f043 0307 	orr.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
 8002c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	021a      	lsls	r2, r3, #8
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d101      	bne.n	8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c58:	2302      	movs	r3, #2
 8002c5a:	e046      	b.n	8002cea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d00e      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a13      	ldr	r2, [pc, #76]	; (8002cf4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d009      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a12      	ldr	r2, [pc, #72]	; (8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d004      	beq.n	8002cbe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	40000400 	.word	0x40000400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40010800 	.word	0x40010800

08002d00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e03f      	b.n	8002d92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fd ff3c 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fb49 	bl	80033dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695a      	ldr	r2, [r3, #20]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_UART_IRQHandler+0x52>
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f003 0320 	and.w	r3, r3, #32
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa4f 	bl	800328a <UART_Receive_IT>
      return;
 8002dec:	e17b      	b.n	80030e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80b1 	beq.w	8002f58 <HAL_UART_IRQHandler+0x1bc>
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d105      	bne.n	8002e0c <HAL_UART_IRQHandler+0x70>
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 80a6 	beq.w	8002f58 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00a      	beq.n	8002e2c <HAL_UART_IRQHandler+0x90>
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_UART_IRQHandler+0xb0>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d005      	beq.n	8002e4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_UART_IRQHandler+0xd0>
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d005      	beq.n	8002e6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00f      	beq.n	8002e96 <HAL_UART_IRQHandler+0xfa>
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d104      	bne.n	8002e8a <HAL_UART_IRQHandler+0xee>
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 811e 	beq.w	80030dc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_UART_IRQHandler+0x11e>
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f9e8 	bl	800328a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b40      	cmp	r3, #64	; 0x40
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f003 0308 	and.w	r3, r3, #8
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d102      	bne.n	8002ee2 <HAL_UART_IRQHandler+0x146>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d031      	beq.n	8002f46 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f92a 	bl	800313c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef2:	2b40      	cmp	r3, #64	; 0x40
 8002ef4:	d123      	bne.n	8002f3e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d013      	beq.n	8002f36 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	4a76      	ldr	r2, [pc, #472]	; (80030ec <HAL_UART_IRQHandler+0x350>)
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe f86c 	bl	8000ff8 <HAL_DMA_Abort_IT>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f30:	4610      	mov	r0, r2
 8002f32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f34:	e00e      	b.n	8002f54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8ec 	bl	8003114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3c:	e00a      	b.n	8002f54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8e8 	bl	8003114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f44:	e006      	b.n	8002f54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f8e4 	bl	8003114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f52:	e0c3      	b.n	80030dc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f54:	bf00      	nop
    return;
 8002f56:	e0c1      	b.n	80030dc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	f040 80a1 	bne.w	80030a4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 809b 	beq.w	80030a4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8095 	beq.w	80030a4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b40      	cmp	r3, #64	; 0x40
 8002f9c:	d14e      	bne.n	800303c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002fa8:	8a3b      	ldrh	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8098 	beq.w	80030e0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002fb4:	8a3a      	ldrh	r2, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	f080 8092 	bcs.w	80030e0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	8a3a      	ldrh	r2, [r7, #16]
 8002fc0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d02b      	beq.n	8003024 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fda:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ffa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0210 	bic.w	r2, r2, #16
 8003018:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301e:	4618      	mov	r0, r3
 8003020:	f7fd ffad 	bl	8000f7e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800302c:	b29b      	uxth	r3, r3
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	b29b      	uxth	r3, r3
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f876 	bl	8003126 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800303a:	e051      	b.n	80030e0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003044:	b29b      	uxth	r3, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d047      	beq.n	80030e4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003054:	8a7b      	ldrh	r3, [r7, #18]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003068:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0210 	bic.w	r2, r2, #16
 8003096:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003098:	8a7b      	ldrh	r3, [r7, #18]
 800309a:	4619      	mov	r1, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f842 	bl	8003126 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80030a2:	e01f      	b.n	80030e4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d008      	beq.n	80030c0 <HAL_UART_IRQHandler+0x324>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f87f 	bl	80031bc <UART_Transmit_IT>
    return;
 80030be:	e012      	b.n	80030e6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_UART_IRQHandler+0x34a>
 80030ca:	6a3b      	ldr	r3, [r7, #32]
 80030cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 f8c0 	bl	800325a <UART_EndTransmit_IT>
    return;
 80030da:	e004      	b.n	80030e6 <HAL_UART_IRQHandler+0x34a>
    return;
 80030dc:	bf00      	nop
 80030de:	e002      	b.n	80030e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_UART_IRQHandler+0x34a>
      return;
 80030e4:	bf00      	nop
  }
}
 80030e6:	3728      	adds	r7, #40	; 0x28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	08003195 	.word	0x08003195

080030f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	460b      	mov	r3, r1
 8003130:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr

0800313c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003152:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695a      	ldr	r2, [r3, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003168:	2b01      	cmp	r3, #1
 800316a:	d107      	bne.n	800317c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0210 	bic.w	r2, r2, #16
 800317a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2220      	movs	r2, #32
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff ffb0 	bl	8003114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b21      	cmp	r3, #33	; 0x21
 80031ce:	d13e      	bne.n	800324e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031d8:	d114      	bne.n	8003204 <UART_Transmit_IT+0x48>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d110      	bne.n	8003204 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	881b      	ldrh	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	1c9a      	adds	r2, r3, #2
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	e008      	b.n	8003216 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	1c59      	adds	r1, r3, #1
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6211      	str	r1, [r2, #32]
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29b      	uxth	r3, r3
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	4619      	mov	r1, r3
 8003224:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10f      	bne.n	800324a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003238:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003248:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr

0800325a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b082      	sub	sp, #8
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003270:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ff38 	bl	80030f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b22      	cmp	r3, #34	; 0x22
 800329c:	f040 8099 	bne.w	80033d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	d117      	bne.n	80032da <UART_Receive_IT+0x50>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d113      	bne.n	80032da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	1c9a      	adds	r2, r3, #2
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
 80032d8:	e026      	b.n	8003328 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ec:	d007      	beq.n	80032fe <UART_Receive_IT+0x74>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <UART_Receive_IT+0x82>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e008      	b.n	800331e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003318:	b2da      	uxtb	r2, r3
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29b      	uxth	r3, r3
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4619      	mov	r1, r3
 8003336:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003338:	2b00      	cmp	r3, #0
 800333a:	d148      	bne.n	80033ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0220 	bic.w	r2, r2, #32
 800334a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	695a      	ldr	r2, [r3, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003378:	2b01      	cmp	r3, #1
 800337a:	d123      	bne.n	80033c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0210 	bic.w	r2, r2, #16
 8003390:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b10      	cmp	r3, #16
 800339e:	d10a      	bne.n	80033b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	60fb      	str	r3, [r7, #12]
 80033b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff feb2 	bl	8003126 <HAL_UARTEx_RxEventCallback>
 80033c2:	e002      	b.n	80033ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fe9c 	bl	8003102 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e002      	b.n	80033d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	4313      	orrs	r3, r2
 8003410:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800341c:	f023 030c 	bic.w	r3, r3, #12
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	430b      	orrs	r3, r1
 8003428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699a      	ldr	r2, [r3, #24]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a55      	ldr	r2, [pc, #340]	; (800359c <UART_SetConfig+0x1c0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d103      	bne.n	8003452 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800344a:	f7fe fe85 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	e002      	b.n	8003458 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003452:	f7fe fe6d 	bl	8002130 <HAL_RCC_GetPCLK1Freq>
 8003456:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003460:	d14c      	bne.n	80034fc <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009a      	lsls	r2, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	4a49      	ldr	r2, [pc, #292]	; (80035a0 <UART_SetConfig+0x1c4>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	0119      	lsls	r1, r3, #4
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	fbb2 f2f3 	udiv	r2, r2, r3
 8003498:	4b41      	ldr	r3, [pc, #260]	; (80035a0 <UART_SetConfig+0x1c4>)
 800349a:	fba3 0302 	umull	r0, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2064      	movs	r0, #100	; 0x64
 80034a2:	fb00 f303 	mul.w	r3, r0, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	00db      	lsls	r3, r3, #3
 80034aa:	3332      	adds	r3, #50	; 0x32
 80034ac:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <UART_SetConfig+0x1c4>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034ba:	4419      	add	r1, r3
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4613      	mov	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	009a      	lsls	r2, r3, #2
 80034c6:	441a      	add	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d2:	4b33      	ldr	r3, [pc, #204]	; (80035a0 <UART_SetConfig+0x1c4>)
 80034d4:	fba3 0302 	umull	r0, r3, r3, r2
 80034d8:	095b      	lsrs	r3, r3, #5
 80034da:	2064      	movs	r0, #100	; 0x64
 80034dc:	fb00 f303 	mul.w	r3, r0, r3
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	3332      	adds	r3, #50	; 0x32
 80034e6:	4a2e      	ldr	r2, [pc, #184]	; (80035a0 <UART_SetConfig+0x1c4>)
 80034e8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	f003 0207 	and.w	r2, r3, #7
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	440a      	add	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034fa:	e04a      	b.n	8003592 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4613      	mov	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4413      	add	r3, r2
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	441a      	add	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4a23      	ldr	r2, [pc, #140]	; (80035a0 <UART_SetConfig+0x1c4>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	095b      	lsrs	r3, r3, #5
 800351a:	0119      	lsls	r1, r3, #4
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009a      	lsls	r2, r3, #2
 8003526:	441a      	add	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003532:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <UART_SetConfig+0x1c4>)
 8003534:	fba3 0302 	umull	r0, r3, r3, r2
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	2064      	movs	r0, #100	; 0x64
 800353c:	fb00 f303 	mul.w	r3, r0, r3
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	3332      	adds	r3, #50	; 0x32
 8003546:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <UART_SetConfig+0x1c4>)
 8003548:	fba2 2303 	umull	r2, r3, r2, r3
 800354c:	095b      	lsrs	r3, r3, #5
 800354e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003552:	4419      	add	r1, r3
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	441a      	add	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	fbb2 f2f3 	udiv	r2, r2, r3
 800356a:	4b0d      	ldr	r3, [pc, #52]	; (80035a0 <UART_SetConfig+0x1c4>)
 800356c:	fba3 0302 	umull	r0, r3, r3, r2
 8003570:	095b      	lsrs	r3, r3, #5
 8003572:	2064      	movs	r0, #100	; 0x64
 8003574:	fb00 f303 	mul.w	r3, r0, r3
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	3332      	adds	r3, #50	; 0x32
 800357e:	4a08      	ldr	r2, [pc, #32]	; (80035a0 <UART_SetConfig+0x1c4>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	095b      	lsrs	r3, r3, #5
 8003586:	f003 020f 	and.w	r2, r3, #15
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	440a      	add	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40013800 	.word	0x40013800
 80035a0:	51eb851f 	.word	0x51eb851f

080035a4 <__libc_init_array>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	2600      	movs	r6, #0
 80035a8:	4d0c      	ldr	r5, [pc, #48]	; (80035dc <__libc_init_array+0x38>)
 80035aa:	4c0d      	ldr	r4, [pc, #52]	; (80035e0 <__libc_init_array+0x3c>)
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	42a6      	cmp	r6, r4
 80035b2:	d109      	bne.n	80035c8 <__libc_init_array+0x24>
 80035b4:	f000 f822 	bl	80035fc <_init>
 80035b8:	2600      	movs	r6, #0
 80035ba:	4d0a      	ldr	r5, [pc, #40]	; (80035e4 <__libc_init_array+0x40>)
 80035bc:	4c0a      	ldr	r4, [pc, #40]	; (80035e8 <__libc_init_array+0x44>)
 80035be:	1b64      	subs	r4, r4, r5
 80035c0:	10a4      	asrs	r4, r4, #2
 80035c2:	42a6      	cmp	r6, r4
 80035c4:	d105      	bne.n	80035d2 <__libc_init_array+0x2e>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80035cc:	4798      	blx	r3
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7ee      	b.n	80035b0 <__libc_init_array+0xc>
 80035d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80035d6:	4798      	blx	r3
 80035d8:	3601      	adds	r6, #1
 80035da:	e7f2      	b.n	80035c2 <__libc_init_array+0x1e>
 80035dc:	08003640 	.word	0x08003640
 80035e0:	08003640 	.word	0x08003640
 80035e4:	08003640 	.word	0x08003640
 80035e8:	08003644 	.word	0x08003644

080035ec <memset>:
 80035ec:	4603      	mov	r3, r0
 80035ee:	4402      	add	r2, r0
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d100      	bne.n	80035f6 <memset+0xa>
 80035f4:	4770      	bx	lr
 80035f6:	f803 1b01 	strb.w	r1, [r3], #1
 80035fa:	e7f9      	b.n	80035f0 <memset+0x4>

080035fc <_init>:
 80035fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fe:	bf00      	nop
 8003600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003602:	bc08      	pop	{r3}
 8003604:	469e      	mov	lr, r3
 8003606:	4770      	bx	lr

08003608 <_fini>:
 8003608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360a:	bf00      	nop
 800360c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360e:	bc08      	pop	{r3}
 8003610:	469e      	mov	lr, r3
 8003612:	4770      	bx	lr
